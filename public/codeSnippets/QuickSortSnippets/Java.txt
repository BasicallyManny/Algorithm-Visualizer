public static int hoarePartition(int[] array, int low, int high) {
    Random random = new Random();   
    // Randomly select a pivot index between low and high
    int pivotIndex = low + random.nextInt(high - low + 1);
        
    // Swap the randomly chosen pivot with the first element
    int temp = array[low];
    array[low] = array[pivotIndex];
    array[pivotIndex] = temp;
        
    // Now the pivot is the first element
    int pivot = array[low];
        
    int i = low - 1;
    int j = high + 1;

    while (true) {
        // Move i to the right until an element >= pivot is found
        do{
            i++;
        } while (array[i] < pivot);

        // Move j to the left until an element <= pivot isfound
         do {
            j--;
        } while (array[j] > pivot);

        // If i and j have crossed, return the partition index
        if (i >= j) {
            return j;
        }

        // Swap elements at i and j
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

public static void quickSort(int[] array, int low, int high) {
    if (low < high) {
        // Partition the array using Hoare's partition scheme
        int pi = hoarePartition(array, low, high);

        // Recursively sort the two halves
        quickSort(array, low, pi);       // Note: "pi", not "pi-1"
        quickSort(array, pi + 1, high);  // pi + 1 starts from the next segment
    }
}
